#!/usr/bin/env runhaskell

{-|
  = Problem #2: Even Fibonacci numbers

  Each new term in the Fibonacci sequence is generated by adding
  the previous two terms. By starting with 1 and 2, the first 10
  terms will be:

      1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

  By considering the terms in the Fibonacci sequence whose values
  do not exceed four million, find the sum of the even-valued
  terms.
-}

import Test.HUnit


solve :: Int -> Int
solve exclusiveLimit = sum $ filter even fibonaccis
    where
        fibonaccis = takeWhile (< exclusiveLimit) fibonacci

fibonacci :: [Int]
fibonacci = map fst $ iterate (\(a, b) -> (b, a + b)) (0, 1)


-- tests

testFibonacci = TestCase (assertEqual "As Fibonacci sequence," expected actual)
    where
        actual = take 10 $ drop 2 $ fibonacci
        expected = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89]

testSolution = TestCase (assertEqual "As the solution," 4613732 (solve 4000000))

main = runTestTT (TestList [testFibonacci, testSolution])
